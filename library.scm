(define (not p) (if p #f #t))

(define (list . args)
  (define (list-iter args)
    (if (null? args) '()
      (cons (car args) (list-iter (cdr args)))))
  (list-iter args))

(define (list? obj)
  (cond
    ((null? obj) #t)
    ((pair? obj) (list? (cdr obj)))
    (else #f)))

(define (reverse list)
  (letrec (
    (reverse-iter (lambda (sofar togo)
      (if (null? togo) sofar
        (reverse-iter (cons (car togo) sofar) (cdr togo))))))
    (reverse-iter '() list)))

(define (append . lists)
  (define (append-iter togo rest)
    (if (null? togo)
      (apply append rest)
      (cons (car togo) (append-iter (cdr togo) rest))))
  (if (null? lists) '()
    (append-iter (car lists) (cdr lists))))
;->(append '(1 3 5) '(2 4 6) '(3 7 9) '( 4 5 1))
;'(1 3 5 2 4 6 3 7 9 4 5 1)

(define (filter pred? lst)
  (if (null? lst) '()
    (if (pred? (car lst))
      (cons (car lst) (filter pred? (cdr lst)))
      (filter pred? (cdr lst)))))

(define (map func lst)
  (if (null? lst) '()
    (cons (func (car lst)) (map func (cdr lst)))))

(define (reduce func initial lst)
  (letrec (
    (reduce-iter (lambda (rslt togo)
      (if (null? togo) rslt
        (reduce-iter (func rslt (car togo)) (cdr togo))))))
    (reduce-iter initial lst)))

(define (assoc value lst)
  (cond
    ((null? lst) #f)
    ((equal? value (caar lst)) (car lst))
    (else (assoc value (cdr lst)))))

;"and" and "or" are implemented as special forms that take multiple parameters
;"equal?" may not be implemented in terms of "=" because "=" can't be applied
; to chars, strings and regexps.


;generated by "python3 make_cr.py"
(define (caar pair) (car (car pair)))
(define (cdar pair) (cdr (car pair)))
(define (cadr pair) (car (cdr pair)))
(define (cddr pair) (cdr (cdr pair)))
(define (caaar pair) (car (car (car pair))))
(define (cdaar pair) (cdr (car (car pair))))
(define (cadar pair) (car (cdr (car pair))))
(define (cddar pair) (cdr (cdr (car pair))))
(define (caadr pair) (car (car (cdr pair))))
(define (cdadr pair) (cdr (car (cdr pair))))
(define (caddr pair) (car (cdr (cdr pair))))
(define (cdddr pair) (cdr (cdr (cdr pair))))
(define (caaaar pair) (car (car (car (car pair)))))
(define (cdaaar pair) (cdr (car (car (car pair)))))
(define (cadaar pair) (car (cdr (car (car pair)))))
(define (cddaar pair) (cdr (cdr (car (car pair)))))
(define (caadar pair) (car (car (cdr (car pair)))))
(define (cdadar pair) (cdr (car (cdr (car pair)))))
(define (caddar pair) (car (cdr (cdr (car pair)))))
(define (cdddar pair) (cdr (cdr (cdr (car pair)))))
(define (caaadr pair) (car (car (car (cdr pair)))))
(define (cdaadr pair) (cdr (car (car (cdr pair)))))
(define (cadadr pair) (car (cdr (car (cdr pair)))))
(define (cddadr pair) (cdr (cdr (car (cdr pair)))))
(define (caaddr pair) (car (car (cdr (cdr pair)))))
(define (cdaddr pair) (cdr (car (cdr (cdr pair)))))
(define (cadddr pair) (car (cdr (cdr (cdr pair)))))
(define (cddddr pair) (cdr (cdr (cdr (cdr pair)))))
